/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Component, Input } from '@angular/core';
import { NgBootstrapAlertService } from './ng-bootstrap-alert.service';
import { trigger, state, transition, style, animate } from '@angular/animations';
var NgBootstrapAlertComponent = /** @class */ (function () {
    function NgBootstrapAlertComponent(bootstrapAlertService) {
        var _this = this;
        this.bootstrapAlertService = bootstrapAlertService;
        this.DEFAULT_TIMEOUT = 3000;
        this.FADE_TIMEOUT = 600;
        this.bootstrapAlerts = [];
        this.bootstrapAlertService._bootstrapAlert.subscribe(function (bootstrapAlert) {
            _this.show(bootstrapAlert);
        });
    }
    /**
     * @param {?} bootstrapAlert
     * @return {?}
     */
    NgBootstrapAlertComponent.prototype.show = /**
     * @param {?} bootstrapAlert
     * @return {?}
     */
    function (bootstrapAlert) {
        var _this = this;
        if (!bootstrapAlert) {
            return;
        }
        this.bootstrapAlerts.unshift(bootstrapAlert);
        setTimeout(function () {
            _this.destroy(bootstrapAlert.uuid);
        }, bootstrapAlert.timeoutInMiliSeconds ? bootstrapAlert.timeoutInMiliSeconds : this.DEFAULT_TIMEOUT);
    };
    /**
     * @param {?} bootstrapAlert
     * @return {?}
     */
    NgBootstrapAlertComponent.prototype.fade = /**
     * @param {?} bootstrapAlert
     * @return {?}
     */
    function (bootstrapAlert) {
        bootstrapAlert.state = 'destroyed';
    };
    /**
     * @param {?} uuid
     * @return {?}
     */
    NgBootstrapAlertComponent.prototype.destroy = /**
     * @param {?} uuid
     * @return {?}
     */
    function (uuid) {
        var _this = this;
        var /** @type {?} */ bootstrapAlertIndex = this.findIndex(this.bootstrapAlerts, 'uuid', uuid);
        if (bootstrapAlertIndex !== -1) {
            var /** @type {?} */ bootstrapAlert = this.bootstrapAlerts[bootstrapAlertIndex];
            bootstrapAlert.state = 'destroyed';
            setTimeout(function () {
                _this.bootstrapAlerts.splice(bootstrapAlertIndex, 1);
            }, this.FADE_TIMEOUT);
        }
    };
    /**
     * @param {?} array
     * @param {?} attr
     * @param {?} value
     * @return {?}
     */
    NgBootstrapAlertComponent.prototype.findIndex = /**
     * @param {?} array
     * @param {?} attr
     * @param {?} value
     * @return {?}
     */
    function (array, attr, value) {
        for (var /** @type {?} */ i = 0; i < array.length; i += 1) {
            if (array[i][attr] === value) {
                return i;
            }
        }
        return -1;
    };
    NgBootstrapAlertComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ng-bootstrap-alert',
                    template: "<div [ngClass]=\"alertPosition\" class=\"bootstrap-alert col-lg-4\">\n\t<div *ngFor=\"let bootstrapAlert of bootstrapAlerts\" id=\"{{bootstrapAlert.uuid}}\" class=\"alert alert-dismissable mb-2\" [ngClass]=\"bootstrapAlert.type\" [@alertVisible]=\"bootstrapAlert.state\">\n\t\t<button type=\"button\" class=\"close\" data-dismiss=\"alert\">x</button>\n\t\t{{bootstrapAlert.message}}\n\t</div>\n</div>",
                    styles: [".bootstrap-alert{z-index:2000;position:fixed}.top-left{left:1rem;top:1rem}.top-center{margin:auto;left:0;right:0;top:1rem}.top-right{right:1rem;top:1rem}.bottom-left{left:1rem;bottom:1rem}.bottom-center{margin:auto;left:0;right:0;bottom:1rem}.bottom-right{right:1rem;bottom:1rem}"],
                    animations: [
                        trigger('alertVisible', [
                            state('visible', style({ opacity: 1 })),
                            state('destroyed', style({ opacity: 0 })),
                            transition('visible => destroyed', animate('600ms')),
                            transition('destroyed => visible', animate('600ms')),
                        ])
                    ]
                },] },
    ];
    /** @nocollapse */
    NgBootstrapAlertComponent.ctorParameters = function () { return [
        { type: NgBootstrapAlertService }
    ]; };
    NgBootstrapAlertComponent.propDecorators = {
        alertPosition: [{ type: Input }]
    };
    return NgBootstrapAlertComponent;
}());
export { NgBootstrapAlertComponent };
function NgBootstrapAlertComponent_tsickle_Closure_declarations() {
    /** @type {?} */
    NgBootstrapAlertComponent.prototype.alertPosition;
    /** @type {?} */
    NgBootstrapAlertComponent.prototype.bootstrapAlerts;
    /** @type {?} */
    NgBootstrapAlertComponent.prototype.DEFAULT_TIMEOUT;
    /** @type {?} */
    NgBootstrapAlertComponent.prototype.FADE_TIMEOUT;
    /** @type {?} */
    NgBootstrapAlertComponent.prototype.bootstrapAlertService;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctYm9vdHN0cmFwLWFsZXJ0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25nLWJvb3RzdHJhcC1hbGVydC8iLCJzb3VyY2VzIjpbImxpYi9uZy1ib290c3RyYXAtYWxlcnQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFjLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUU3RCxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUN2RSxPQUFPLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxNQUFNLHFCQUFxQixDQUFDOztJQTJCN0UsbUNBQXFCLHFCQUE4QztRQUFuRSxpQkFTQztRQVRvQiwwQkFBcUIsR0FBckIscUJBQXFCLENBQXlCOytCQVd4QyxJQUFJOzRCQUNQLEdBQUc7UUFWdkIsSUFBSSxDQUFDLGVBQWUsR0FBRyxFQUFFLENBQUM7UUFDMUIsSUFBSSxDQUFDLHFCQUFxQixDQUFDLGVBQWUsQ0FBQyxTQUFTLENBQ2hELFVBQUUsY0FBeUM7WUFDdkMsS0FBSSxDQUFDLElBQUksQ0FBRSxjQUFjLENBQUUsQ0FBQztTQUMvQixDQUNKLENBQUM7S0FFTDs7Ozs7SUFLRCx3Q0FBSTs7OztJQUFKLFVBQU0sY0FBeUM7UUFBL0MsaUJBVUM7UUFURyxFQUFFLENBQUMsQ0FBRSxDQUFDLGNBQWUsQ0FBQyxDQUFDLENBQUM7WUFDcEIsTUFBTSxDQUFDO1NBQ1Y7UUFDRCxJQUFJLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBRSxjQUFjLENBQUUsQ0FBQztRQUMvQyxVQUFVLENBQ047WUFDSSxLQUFJLENBQUMsT0FBTyxDQUFFLGNBQWMsQ0FBQyxJQUFJLENBQUUsQ0FBQztTQUN2QyxFQUFFLGNBQWMsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDLG9CQUFvQixDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUN0RyxDQUFDO0tBQ0w7Ozs7O0lBRUQsd0NBQUk7Ozs7SUFBSixVQUFNLGNBQWM7UUFDaEIsY0FBYyxDQUFDLEtBQUssR0FBRyxXQUFXLENBQUM7S0FDdEM7Ozs7O0lBRUQsMkNBQU87Ozs7SUFBUCxVQUFTLElBQVk7UUFBckIsaUJBV0M7UUFWRyxxQkFBTSxtQkFBbUIsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFFLElBQUksQ0FBQyxlQUFlLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBRSxDQUFDO1FBQ2pGLEVBQUUsQ0FBQyxDQUFFLG1CQUFtQixLQUFLLENBQUMsQ0FBRSxDQUFDLENBQUMsQ0FBQztZQUMvQixxQkFBTSxjQUFjLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1lBQ2pFLGNBQWMsQ0FBQyxLQUFLLEdBQUcsV0FBVyxDQUFDO1lBQ25DLFVBQVUsQ0FDUjtnQkFDSSxLQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBRSxtQkFBbUIsRUFBRSxDQUFDLENBQUUsQ0FBQzthQUN6RCxFQUFFLElBQUksQ0FBQyxZQUFZLENBQ3JCLENBQUM7U0FDTDtLQUNKOzs7Ozs7O0lBRUQsNkNBQVM7Ozs7OztJQUFULFVBQVUsS0FBSyxFQUFFLElBQUksRUFBRSxLQUFLO1FBQ3hCLEdBQUcsQ0FBQyxDQUFDLHFCQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDO1lBQ3ZDLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxLQUFLLENBQUMsQ0FBQyxDQUFDO2dCQUMzQixNQUFNLENBQUMsQ0FBQyxDQUFDO2FBQ1o7U0FDSjtRQUNELE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUNiOztnQkEzRUosU0FBUyxTQUFFO29CQUNSLFFBQVEsRUFBRSxvQkFBb0I7b0JBQzlCLFFBQVEsRUFBRSxrWkFLUDtvQkFDSCxNQUFNLEVBQUUsQ0FBQyx5UkFBeVIsQ0FBQztvQkFDblMsVUFBVSxFQUFFO3dCQUNSLE9BQU8sQ0FBRSxjQUFjLEVBQUU7NEJBQ3JCLEtBQUssQ0FBRSxTQUFTLEVBQUUsS0FBSyxDQUFFLEVBQUUsT0FBTyxFQUFFLENBQUMsRUFBRSxDQUFFLENBQUU7NEJBQzNDLEtBQUssQ0FBRSxXQUFXLEVBQUUsS0FBSyxDQUFFLEVBQUUsT0FBTyxFQUFFLENBQUMsRUFBRSxDQUFFLENBQUU7NEJBQzdDLFVBQVUsQ0FBRSxzQkFBc0IsRUFBRSxPQUFPLENBQUUsT0FBTyxDQUFFLENBQUU7NEJBQ3hELFVBQVUsQ0FBRSxzQkFBc0IsRUFBRSxPQUFPLENBQUUsT0FBTyxDQUFFLENBQUU7eUJBQzNELENBQUU7cUJBQ047aUJBQ0o7Ozs7Z0JBcEJRLHVCQUF1Qjs7O2dDQXdCM0IsS0FBSzs7b0NBMUJWOztTQXdCYSx5QkFBeUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIEVsZW1lbnRSZWYsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOZ0Jvb3RzdHJhcEFsZXJ0LCBOZ0Jvb3RzdHJhcEFsZXJ0SW50ZXJmYWNlIH0gZnJvbSAnLi9uZy1ib290c3RyYXAtYWxlcnQnO1xuaW1wb3J0IHsgTmdCb290c3RyYXBBbGVydFNlcnZpY2UgfSBmcm9tICcuL25nLWJvb3RzdHJhcC1hbGVydC5zZXJ2aWNlJztcbmltcG9ydCB7IHRyaWdnZXIsIHN0YXRlLCB0cmFuc2l0aW9uLCBzdHlsZSwgYW5pbWF0ZSB9IGZyb20gJ0Bhbmd1bGFyL2FuaW1hdGlvbnMnO1xuXG5AQ29tcG9uZW50KCB7XG4gICAgc2VsZWN0b3I6ICduZy1ib290c3RyYXAtYWxlcnQnLFxuICAgIHRlbXBsYXRlOiBgPGRpdiBbbmdDbGFzc109XCJhbGVydFBvc2l0aW9uXCIgY2xhc3M9XCJib290c3RyYXAtYWxlcnQgY29sLWxnLTRcIj5cclxuXHQ8ZGl2ICpuZ0Zvcj1cImxldCBib290c3RyYXBBbGVydCBvZiBib290c3RyYXBBbGVydHNcIiBpZD1cInt7Ym9vdHN0cmFwQWxlcnQudXVpZH19XCIgY2xhc3M9XCJhbGVydCBhbGVydC1kaXNtaXNzYWJsZSBtYi0yXCIgW25nQ2xhc3NdPVwiYm9vdHN0cmFwQWxlcnQudHlwZVwiIFtAYWxlcnRWaXNpYmxlXT1cImJvb3RzdHJhcEFsZXJ0LnN0YXRlXCI+XHJcblx0XHQ8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImNsb3NlXCIgZGF0YS1kaXNtaXNzPVwiYWxlcnRcIj54PC9idXR0b24+XHJcblx0XHR7e2Jvb3RzdHJhcEFsZXJ0Lm1lc3NhZ2V9fVxyXG5cdDwvZGl2PlxyXG48L2Rpdj5gLFxuICAgIHN0eWxlczogW2AuYm9vdHN0cmFwLWFsZXJ0e3otaW5kZXg6MjAwMDtwb3NpdGlvbjpmaXhlZH0udG9wLWxlZnR7bGVmdDoxcmVtO3RvcDoxcmVtfS50b3AtY2VudGVye21hcmdpbjphdXRvO2xlZnQ6MDtyaWdodDowO3RvcDoxcmVtfS50b3AtcmlnaHR7cmlnaHQ6MXJlbTt0b3A6MXJlbX0uYm90dG9tLWxlZnR7bGVmdDoxcmVtO2JvdHRvbToxcmVtfS5ib3R0b20tY2VudGVye21hcmdpbjphdXRvO2xlZnQ6MDtyaWdodDowO2JvdHRvbToxcmVtfS5ib3R0b20tcmlnaHR7cmlnaHQ6MXJlbTtib3R0b206MXJlbX1gXSxcbiAgICBhbmltYXRpb25zOiBbXG4gICAgICAgIHRyaWdnZXIoICdhbGVydFZpc2libGUnLCBbXG4gICAgICAgICAgICBzdGF0ZSggJ3Zpc2libGUnLCBzdHlsZSggeyBvcGFjaXR5OiAxIH0gKSApLFxuICAgICAgICAgICAgc3RhdGUoICdkZXN0cm95ZWQnLCBzdHlsZSggeyBvcGFjaXR5OiAwIH0gKSApLFxuICAgICAgICAgICAgdHJhbnNpdGlvbiggJ3Zpc2libGUgPT4gZGVzdHJveWVkJywgYW5pbWF0ZSggJzYwMG1zJyApICksXG4gICAgICAgICAgICB0cmFuc2l0aW9uKCAnZGVzdHJveWVkID0+IHZpc2libGUnLCBhbmltYXRlKCAnNjAwbXMnICkgKSxcbiAgICAgICAgXSApXG4gICAgXVxufSApXG5cbmV4cG9ydCBjbGFzcyBOZ0Jvb3RzdHJhcEFsZXJ0Q29tcG9uZW50IHtcblxuICAgIEBJbnB1dCgpIGFsZXJ0UG9zaXRpb246IHN0cmluZztcblxuICAgIGJvb3RzdHJhcEFsZXJ0czogQXJyYXk8TmdCb290c3RyYXBBbGVydEludGVyZmFjZT47XG5cbiAgICBjb25zdHJ1Y3RvciggcHJpdmF0ZSBib290c3RyYXBBbGVydFNlcnZpY2U6IE5nQm9vdHN0cmFwQWxlcnRTZXJ2aWNlICkge1xuXG4gICAgICAgIHRoaXMuYm9vdHN0cmFwQWxlcnRzID0gW107XG4gICAgICAgIHRoaXMuYm9vdHN0cmFwQWxlcnRTZXJ2aWNlLl9ib290c3RyYXBBbGVydC5zdWJzY3JpYmUoXG4gICAgICAgICAgICAoIGJvb3RzdHJhcEFsZXJ0OiBOZ0Jvb3RzdHJhcEFsZXJ0SW50ZXJmYWNlICkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuc2hvdyggYm9vdHN0cmFwQWxlcnQgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcblxuICAgIH1cblxuICAgIHJlYWRvbmx5IERFRkFVTFRfVElNRU9VVCA9IDMwMDA7XG4gICAgcmVhZG9ubHkgRkFERV9USU1FT1VUID0gNjAwO1xuXG4gICAgc2hvdyggYm9vdHN0cmFwQWxlcnQ6IE5nQm9vdHN0cmFwQWxlcnRJbnRlcmZhY2UgKTogdm9pZCB7XG4gICAgICAgIGlmICggIWJvb3RzdHJhcEFsZXJ0ICkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYm9vdHN0cmFwQWxlcnRzLnVuc2hpZnQoIGJvb3RzdHJhcEFsZXJ0ICk7XG4gICAgICAgIHNldFRpbWVvdXQoXG4gICAgICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5kZXN0cm95KCBib290c3RyYXBBbGVydC51dWlkICk7XG4gICAgICAgICAgICB9LCBib290c3RyYXBBbGVydC50aW1lb3V0SW5NaWxpU2Vjb25kcyA/IGJvb3RzdHJhcEFsZXJ0LnRpbWVvdXRJbk1pbGlTZWNvbmRzIDogdGhpcy5ERUZBVUxUX1RJTUVPVVRcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBmYWRlKCBib290c3RyYXBBbGVydCk6IHZvaWQge1xuICAgICAgICBib290c3RyYXBBbGVydC5zdGF0ZSA9ICdkZXN0cm95ZWQnO1xuICAgIH1cblxuICAgIGRlc3Ryb3koIHV1aWQ6IHN0cmluZyApOiB2b2lkIHtcbiAgICAgICAgY29uc3QgYm9vdHN0cmFwQWxlcnRJbmRleCA9IHRoaXMuZmluZEluZGV4KCB0aGlzLmJvb3RzdHJhcEFsZXJ0cywgJ3V1aWQnLCB1dWlkICk7XG4gICAgICAgIGlmICggYm9vdHN0cmFwQWxlcnRJbmRleCAhPT0gLTEgKSB7XG4gICAgICAgICAgICBjb25zdCBib290c3RyYXBBbGVydCA9IHRoaXMuYm9vdHN0cmFwQWxlcnRzW2Jvb3RzdHJhcEFsZXJ0SW5kZXhdO1xuICAgICAgICAgICAgYm9vdHN0cmFwQWxlcnQuc3RhdGUgPSAnZGVzdHJveWVkJztcbiAgICAgICAgICAgIHNldFRpbWVvdXQoXG4gICAgICAgICAgICAgICgpID0+IHtcbiAgICAgICAgICAgICAgICAgIHRoaXMuYm9vdHN0cmFwQWxlcnRzLnNwbGljZSggYm9vdHN0cmFwQWxlcnRJbmRleCwgMSApO1xuICAgICAgICAgICAgICB9LCB0aGlzLkZBREVfVElNRU9VVFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZpbmRJbmRleChhcnJheSwgYXR0ciwgdmFsdWUpOiBudW1iZXIge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICBpZiAoYXJyYXlbaV1bYXR0cl0gPT09IHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIC0xO1xuICAgIH1cblxufVxuIl19