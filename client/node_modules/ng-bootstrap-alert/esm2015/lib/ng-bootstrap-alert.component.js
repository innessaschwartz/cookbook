/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Component, Input } from '@angular/core';
import { NgBootstrapAlertService } from './ng-bootstrap-alert.service';
import { trigger, state, transition, style, animate } from '@angular/animations';
export class NgBootstrapAlertComponent {
    /**
     * @param {?} bootstrapAlertService
     */
    constructor(bootstrapAlertService) {
        this.bootstrapAlertService = bootstrapAlertService;
        this.DEFAULT_TIMEOUT = 3000;
        this.FADE_TIMEOUT = 600;
        this.bootstrapAlerts = [];
        this.bootstrapAlertService._bootstrapAlert.subscribe((bootstrapAlert) => {
            this.show(bootstrapAlert);
        });
    }
    /**
     * @param {?} bootstrapAlert
     * @return {?}
     */
    show(bootstrapAlert) {
        if (!bootstrapAlert) {
            return;
        }
        this.bootstrapAlerts.unshift(bootstrapAlert);
        setTimeout(() => {
            this.destroy(bootstrapAlert.uuid);
        }, bootstrapAlert.timeoutInMiliSeconds ? bootstrapAlert.timeoutInMiliSeconds : this.DEFAULT_TIMEOUT);
    }
    /**
     * @param {?} bootstrapAlert
     * @return {?}
     */
    fade(bootstrapAlert) {
        bootstrapAlert.state = 'destroyed';
    }
    /**
     * @param {?} uuid
     * @return {?}
     */
    destroy(uuid) {
        const /** @type {?} */ bootstrapAlertIndex = this.findIndex(this.bootstrapAlerts, 'uuid', uuid);
        if (bootstrapAlertIndex !== -1) {
            const /** @type {?} */ bootstrapAlert = this.bootstrapAlerts[bootstrapAlertIndex];
            bootstrapAlert.state = 'destroyed';
            setTimeout(() => {
                this.bootstrapAlerts.splice(bootstrapAlertIndex, 1);
            }, this.FADE_TIMEOUT);
        }
    }
    /**
     * @param {?} array
     * @param {?} attr
     * @param {?} value
     * @return {?}
     */
    findIndex(array, attr, value) {
        for (let /** @type {?} */ i = 0; i < array.length; i += 1) {
            if (array[i][attr] === value) {
                return i;
            }
        }
        return -1;
    }
}
NgBootstrapAlertComponent.decorators = [
    { type: Component, args: [{
                selector: 'ng-bootstrap-alert',
                template: `<div [ngClass]="alertPosition" class="bootstrap-alert col-lg-4">
	<div *ngFor="let bootstrapAlert of bootstrapAlerts" id="{{bootstrapAlert.uuid}}" class="alert alert-dismissable mb-2" [ngClass]="bootstrapAlert.type" [@alertVisible]="bootstrapAlert.state">
		<button type="button" class="close" data-dismiss="alert">x</button>
		{{bootstrapAlert.message}}
	</div>
</div>`,
                styles: [`.bootstrap-alert{z-index:2000;position:fixed}.top-left{left:1rem;top:1rem}.top-center{margin:auto;left:0;right:0;top:1rem}.top-right{right:1rem;top:1rem}.bottom-left{left:1rem;bottom:1rem}.bottom-center{margin:auto;left:0;right:0;bottom:1rem}.bottom-right{right:1rem;bottom:1rem}`],
                animations: [
                    trigger('alertVisible', [
                        state('visible', style({ opacity: 1 })),
                        state('destroyed', style({ opacity: 0 })),
                        transition('visible => destroyed', animate('600ms')),
                        transition('destroyed => visible', animate('600ms')),
                    ])
                ]
            },] },
];
/** @nocollapse */
NgBootstrapAlertComponent.ctorParameters = () => [
    { type: NgBootstrapAlertService }
];
NgBootstrapAlertComponent.propDecorators = {
    alertPosition: [{ type: Input }]
};
function NgBootstrapAlertComponent_tsickle_Closure_declarations() {
    /** @type {?} */
    NgBootstrapAlertComponent.prototype.alertPosition;
    /** @type {?} */
    NgBootstrapAlertComponent.prototype.bootstrapAlerts;
    /** @type {?} */
    NgBootstrapAlertComponent.prototype.DEFAULT_TIMEOUT;
    /** @type {?} */
    NgBootstrapAlertComponent.prototype.FADE_TIMEOUT;
    /** @type {?} */
    NgBootstrapAlertComponent.prototype.bootstrapAlertService;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctYm9vdHN0cmFwLWFsZXJ0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25nLWJvb3RzdHJhcC1hbGVydC8iLCJzb3VyY2VzIjpbImxpYi9uZy1ib290c3RyYXAtYWxlcnQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFjLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUU3RCxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUN2RSxPQUFPLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBcUJqRixNQUFNOzs7O0lBTUYsWUFBcUIscUJBQThDO1FBQTlDLDBCQUFxQixHQUFyQixxQkFBcUIsQ0FBeUI7K0JBV3hDLElBQUk7NEJBQ1AsR0FBRztRQVZ2QixJQUFJLENBQUMsZUFBZSxHQUFHLEVBQUUsQ0FBQztRQUMxQixJQUFJLENBQUMscUJBQXFCLENBQUMsZUFBZSxDQUFDLFNBQVMsQ0FDaEQsQ0FBRSxjQUF5QyxFQUFHLEVBQUU7WUFDNUMsSUFBSSxDQUFDLElBQUksQ0FBRSxjQUFjLENBQUUsQ0FBQztTQUMvQixDQUNKLENBQUM7S0FFTDs7Ozs7SUFLRCxJQUFJLENBQUUsY0FBeUM7UUFDM0MsRUFBRSxDQUFDLENBQUUsQ0FBQyxjQUFlLENBQUMsQ0FBQyxDQUFDO1lBQ3BCLE1BQU0sQ0FBQztTQUNWO1FBQ0QsSUFBSSxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUUsY0FBYyxDQUFFLENBQUM7UUFDL0MsVUFBVSxDQUNOLEdBQUcsRUFBRTtZQUNELElBQUksQ0FBQyxPQUFPLENBQUUsY0FBYyxDQUFDLElBQUksQ0FBRSxDQUFDO1NBQ3ZDLEVBQUUsY0FBYyxDQUFDLG9CQUFvQixDQUFDLENBQUMsQ0FBQyxjQUFjLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQ3RHLENBQUM7S0FDTDs7Ozs7SUFFRCxJQUFJLENBQUUsY0FBYztRQUNoQixjQUFjLENBQUMsS0FBSyxHQUFHLFdBQVcsQ0FBQztLQUN0Qzs7Ozs7SUFFRCxPQUFPLENBQUUsSUFBWTtRQUNqQix1QkFBTSxtQkFBbUIsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFFLElBQUksQ0FBQyxlQUFlLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBRSxDQUFDO1FBQ2pGLEVBQUUsQ0FBQyxDQUFFLG1CQUFtQixLQUFLLENBQUMsQ0FBRSxDQUFDLENBQUMsQ0FBQztZQUMvQix1QkFBTSxjQUFjLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1lBQ2pFLGNBQWMsQ0FBQyxLQUFLLEdBQUcsV0FBVyxDQUFDO1lBQ25DLFVBQVUsQ0FDUixHQUFHLEVBQUU7Z0JBQ0QsSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUUsbUJBQW1CLEVBQUUsQ0FBQyxDQUFFLENBQUM7YUFDekQsRUFBRSxJQUFJLENBQUMsWUFBWSxDQUNyQixDQUFDO1NBQ0w7S0FDSjs7Ozs7OztJQUVELFNBQVMsQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLEtBQUs7UUFDeEIsR0FBRyxDQUFDLENBQUMscUJBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7WUFDdkMsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUM7Z0JBQzNCLE1BQU0sQ0FBQyxDQUFDLENBQUM7YUFDWjtTQUNKO1FBQ0QsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQ2I7OztZQTNFSixTQUFTLFNBQUU7Z0JBQ1IsUUFBUSxFQUFFLG9CQUFvQjtnQkFDOUIsUUFBUSxFQUFFOzs7OztPQUtQO2dCQUNILE1BQU0sRUFBRSxDQUFDLHlSQUF5UixDQUFDO2dCQUNuUyxVQUFVLEVBQUU7b0JBQ1IsT0FBTyxDQUFFLGNBQWMsRUFBRTt3QkFDckIsS0FBSyxDQUFFLFNBQVMsRUFBRSxLQUFLLENBQUUsRUFBRSxPQUFPLEVBQUUsQ0FBQyxFQUFFLENBQUUsQ0FBRTt3QkFDM0MsS0FBSyxDQUFFLFdBQVcsRUFBRSxLQUFLLENBQUUsRUFBRSxPQUFPLEVBQUUsQ0FBQyxFQUFFLENBQUUsQ0FBRTt3QkFDN0MsVUFBVSxDQUFFLHNCQUFzQixFQUFFLE9BQU8sQ0FBRSxPQUFPLENBQUUsQ0FBRTt3QkFDeEQsVUFBVSxDQUFFLHNCQUFzQixFQUFFLE9BQU8sQ0FBRSxPQUFPLENBQUUsQ0FBRTtxQkFDM0QsQ0FBRTtpQkFDTjthQUNKOzs7O1lBcEJRLHVCQUF1Qjs7OzRCQXdCM0IsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgRWxlbWVudFJlZiwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5nQm9vdHN0cmFwQWxlcnQsIE5nQm9vdHN0cmFwQWxlcnRJbnRlcmZhY2UgfSBmcm9tICcuL25nLWJvb3RzdHJhcC1hbGVydCc7XG5pbXBvcnQgeyBOZ0Jvb3RzdHJhcEFsZXJ0U2VydmljZSB9IGZyb20gJy4vbmctYm9vdHN0cmFwLWFsZXJ0LnNlcnZpY2UnO1xuaW1wb3J0IHsgdHJpZ2dlciwgc3RhdGUsIHRyYW5zaXRpb24sIHN0eWxlLCBhbmltYXRlIH0gZnJvbSAnQGFuZ3VsYXIvYW5pbWF0aW9ucyc7XG5cbkBDb21wb25lbnQoIHtcbiAgICBzZWxlY3RvcjogJ25nLWJvb3RzdHJhcC1hbGVydCcsXG4gICAgdGVtcGxhdGU6IGA8ZGl2IFtuZ0NsYXNzXT1cImFsZXJ0UG9zaXRpb25cIiBjbGFzcz1cImJvb3RzdHJhcC1hbGVydCBjb2wtbGctNFwiPlxyXG5cdDxkaXYgKm5nRm9yPVwibGV0IGJvb3RzdHJhcEFsZXJ0IG9mIGJvb3RzdHJhcEFsZXJ0c1wiIGlkPVwie3tib290c3RyYXBBbGVydC51dWlkfX1cIiBjbGFzcz1cImFsZXJ0IGFsZXJ0LWRpc21pc3NhYmxlIG1iLTJcIiBbbmdDbGFzc109XCJib290c3RyYXBBbGVydC50eXBlXCIgW0BhbGVydFZpc2libGVdPVwiYm9vdHN0cmFwQWxlcnQuc3RhdGVcIj5cclxuXHRcdDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiY2xvc2VcIiBkYXRhLWRpc21pc3M9XCJhbGVydFwiPng8L2J1dHRvbj5cclxuXHRcdHt7Ym9vdHN0cmFwQWxlcnQubWVzc2FnZX19XHJcblx0PC9kaXY+XHJcbjwvZGl2PmAsXG4gICAgc3R5bGVzOiBbYC5ib290c3RyYXAtYWxlcnR7ei1pbmRleDoyMDAwO3Bvc2l0aW9uOmZpeGVkfS50b3AtbGVmdHtsZWZ0OjFyZW07dG9wOjFyZW19LnRvcC1jZW50ZXJ7bWFyZ2luOmF1dG87bGVmdDowO3JpZ2h0OjA7dG9wOjFyZW19LnRvcC1yaWdodHtyaWdodDoxcmVtO3RvcDoxcmVtfS5ib3R0b20tbGVmdHtsZWZ0OjFyZW07Ym90dG9tOjFyZW19LmJvdHRvbS1jZW50ZXJ7bWFyZ2luOmF1dG87bGVmdDowO3JpZ2h0OjA7Ym90dG9tOjFyZW19LmJvdHRvbS1yaWdodHtyaWdodDoxcmVtO2JvdHRvbToxcmVtfWBdLFxuICAgIGFuaW1hdGlvbnM6IFtcbiAgICAgICAgdHJpZ2dlciggJ2FsZXJ0VmlzaWJsZScsIFtcbiAgICAgICAgICAgIHN0YXRlKCAndmlzaWJsZScsIHN0eWxlKCB7IG9wYWNpdHk6IDEgfSApICksXG4gICAgICAgICAgICBzdGF0ZSggJ2Rlc3Ryb3llZCcsIHN0eWxlKCB7IG9wYWNpdHk6IDAgfSApICksXG4gICAgICAgICAgICB0cmFuc2l0aW9uKCAndmlzaWJsZSA9PiBkZXN0cm95ZWQnLCBhbmltYXRlKCAnNjAwbXMnICkgKSxcbiAgICAgICAgICAgIHRyYW5zaXRpb24oICdkZXN0cm95ZWQgPT4gdmlzaWJsZScsIGFuaW1hdGUoICc2MDBtcycgKSApLFxuICAgICAgICBdIClcbiAgICBdXG59IClcblxuZXhwb3J0IGNsYXNzIE5nQm9vdHN0cmFwQWxlcnRDb21wb25lbnQge1xuXG4gICAgQElucHV0KCkgYWxlcnRQb3NpdGlvbjogc3RyaW5nO1xuXG4gICAgYm9vdHN0cmFwQWxlcnRzOiBBcnJheTxOZ0Jvb3RzdHJhcEFsZXJ0SW50ZXJmYWNlPjtcblxuICAgIGNvbnN0cnVjdG9yKCBwcml2YXRlIGJvb3RzdHJhcEFsZXJ0U2VydmljZTogTmdCb290c3RyYXBBbGVydFNlcnZpY2UgKSB7XG5cbiAgICAgICAgdGhpcy5ib290c3RyYXBBbGVydHMgPSBbXTtcbiAgICAgICAgdGhpcy5ib290c3RyYXBBbGVydFNlcnZpY2UuX2Jvb3RzdHJhcEFsZXJ0LnN1YnNjcmliZShcbiAgICAgICAgICAgICggYm9vdHN0cmFwQWxlcnQ6IE5nQm9vdHN0cmFwQWxlcnRJbnRlcmZhY2UgKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5zaG93KCBib290c3RyYXBBbGVydCApO1xuICAgICAgICAgICAgfVxuICAgICAgICApO1xuXG4gICAgfVxuXG4gICAgcmVhZG9ubHkgREVGQVVMVF9USU1FT1VUID0gMzAwMDtcbiAgICByZWFkb25seSBGQURFX1RJTUVPVVQgPSA2MDA7XG5cbiAgICBzaG93KCBib290c3RyYXBBbGVydDogTmdCb290c3RyYXBBbGVydEludGVyZmFjZSApOiB2b2lkIHtcbiAgICAgICAgaWYgKCAhYm9vdHN0cmFwQWxlcnQgKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5ib290c3RyYXBBbGVydHMudW5zaGlmdCggYm9vdHN0cmFwQWxlcnQgKTtcbiAgICAgICAgc2V0VGltZW91dChcbiAgICAgICAgICAgICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmRlc3Ryb3koIGJvb3RzdHJhcEFsZXJ0LnV1aWQgKTtcbiAgICAgICAgICAgIH0sIGJvb3RzdHJhcEFsZXJ0LnRpbWVvdXRJbk1pbGlTZWNvbmRzID8gYm9vdHN0cmFwQWxlcnQudGltZW91dEluTWlsaVNlY29uZHMgOiB0aGlzLkRFRkFVTFRfVElNRU9VVFxuICAgICAgICApO1xuICAgIH1cblxuICAgIGZhZGUoIGJvb3RzdHJhcEFsZXJ0KTogdm9pZCB7XG4gICAgICAgIGJvb3RzdHJhcEFsZXJ0LnN0YXRlID0gJ2Rlc3Ryb3llZCc7XG4gICAgfVxuXG4gICAgZGVzdHJveSggdXVpZDogc3RyaW5nICk6IHZvaWQge1xuICAgICAgICBjb25zdCBib290c3RyYXBBbGVydEluZGV4ID0gdGhpcy5maW5kSW5kZXgoIHRoaXMuYm9vdHN0cmFwQWxlcnRzLCAndXVpZCcsIHV1aWQgKTtcbiAgICAgICAgaWYgKCBib290c3RyYXBBbGVydEluZGV4ICE9PSAtMSApIHtcbiAgICAgICAgICAgIGNvbnN0IGJvb3RzdHJhcEFsZXJ0ID0gdGhpcy5ib290c3RyYXBBbGVydHNbYm9vdHN0cmFwQWxlcnRJbmRleF07XG4gICAgICAgICAgICBib290c3RyYXBBbGVydC5zdGF0ZSA9ICdkZXN0cm95ZWQnO1xuICAgICAgICAgICAgc2V0VGltZW91dChcbiAgICAgICAgICAgICAgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgdGhpcy5ib290c3RyYXBBbGVydHMuc3BsaWNlKCBib290c3RyYXBBbGVydEluZGV4LCAxICk7XG4gICAgICAgICAgICAgIH0sIHRoaXMuRkFERV9USU1FT1VUXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZmluZEluZGV4KGFycmF5LCBhdHRyLCB2YWx1ZSk6IG51bWJlciB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgIGlmIChhcnJheVtpXVthdHRyXSA9PT0gdmFsdWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gLTE7XG4gICAgfVxuXG59XG4iXX0=