(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs'), require('@angular/animations'), require('@angular/common'), require('@angular/platform-browser/animations')) :
    typeof define === 'function' && define.amd ? define('ng-bootstrap-alert', ['exports', '@angular/core', 'rxjs', '@angular/animations', '@angular/common', '@angular/platform-browser/animations'], factory) :
    (factory((global['ng-bootstrap-alert'] = {}),global.ng.core,global.rxjs,global.ng.animations,global.ng.common,global.ng.platformBrowser.animations));
}(this, (function (exports,core,rxjs,animations,common,animations$1) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NgBootstrapAlertService = (function () {
        function NgBootstrapAlertService() {
            this._bootstrapAlert = new rxjs.BehaviorSubject(null);
        }
        /**
         * @param {?} alert
         * @return {?}
         */
        NgBootstrapAlertService.prototype.alert = /**
         * @param {?} alert
         * @return {?}
         */
            function (alert) {
                this._bootstrapAlert.next(alert);
            };
        NgBootstrapAlertService.decorators = [
            { type: core.Injectable },
        ];
        /** @nocollapse */
        NgBootstrapAlertService.ctorParameters = function () { return []; };
        return NgBootstrapAlertService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NgBootstrapAlertComponent = (function () {
        function NgBootstrapAlertComponent(bootstrapAlertService) {
            var _this = this;
            this.bootstrapAlertService = bootstrapAlertService;
            this.DEFAULT_TIMEOUT = 3000;
            this.FADE_TIMEOUT = 600;
            this.bootstrapAlerts = [];
            this.bootstrapAlertService._bootstrapAlert.subscribe(function (bootstrapAlert) {
                _this.show(bootstrapAlert);
            });
        }
        /**
         * @param {?} bootstrapAlert
         * @return {?}
         */
        NgBootstrapAlertComponent.prototype.show = /**
         * @param {?} bootstrapAlert
         * @return {?}
         */
            function (bootstrapAlert) {
                var _this = this;
                if (!bootstrapAlert) {
                    return;
                }
                this.bootstrapAlerts.unshift(bootstrapAlert);
                setTimeout(function () {
                    _this.destroy(bootstrapAlert.uuid);
                }, bootstrapAlert.timeoutInMiliSeconds ? bootstrapAlert.timeoutInMiliSeconds : this.DEFAULT_TIMEOUT);
            };
        /**
         * @param {?} bootstrapAlert
         * @return {?}
         */
        NgBootstrapAlertComponent.prototype.fade = /**
         * @param {?} bootstrapAlert
         * @return {?}
         */
            function (bootstrapAlert) {
                bootstrapAlert.state = 'destroyed';
            };
        /**
         * @param {?} uuid
         * @return {?}
         */
        NgBootstrapAlertComponent.prototype.destroy = /**
         * @param {?} uuid
         * @return {?}
         */
            function (uuid) {
                var _this = this;
                var /** @type {?} */ bootstrapAlertIndex = this.findIndex(this.bootstrapAlerts, 'uuid', uuid);
                if (bootstrapAlertIndex !== -1) {
                    var /** @type {?} */ bootstrapAlert = this.bootstrapAlerts[bootstrapAlertIndex];
                    bootstrapAlert.state = 'destroyed';
                    setTimeout(function () {
                        _this.bootstrapAlerts.splice(bootstrapAlertIndex, 1);
                    }, this.FADE_TIMEOUT);
                }
            };
        /**
         * @param {?} array
         * @param {?} attr
         * @param {?} value
         * @return {?}
         */
        NgBootstrapAlertComponent.prototype.findIndex = /**
         * @param {?} array
         * @param {?} attr
         * @param {?} value
         * @return {?}
         */
            function (array, attr, value) {
                for (var /** @type {?} */ i = 0; i < array.length; i += 1) {
                    if (array[i][attr] === value) {
                        return i;
                    }
                }
                return -1;
            };
        NgBootstrapAlertComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'ng-bootstrap-alert',
                        template: "<div [ngClass]=\"alertPosition\" class=\"bootstrap-alert col-lg-4\">\n\t<div *ngFor=\"let bootstrapAlert of bootstrapAlerts\" id=\"{{bootstrapAlert.uuid}}\" class=\"alert alert-dismissable mb-2\" [ngClass]=\"bootstrapAlert.type\" [@alertVisible]=\"bootstrapAlert.state\">\n\t\t<button type=\"button\" class=\"close\" data-dismiss=\"alert\">x</button>\n\t\t{{bootstrapAlert.message}}\n\t</div>\n</div>",
                        styles: [".bootstrap-alert{z-index:2000;position:fixed}.top-left{left:1rem;top:1rem}.top-center{margin:auto;left:0;right:0;top:1rem}.top-right{right:1rem;top:1rem}.bottom-left{left:1rem;bottom:1rem}.bottom-center{margin:auto;left:0;right:0;bottom:1rem}.bottom-right{right:1rem;bottom:1rem}"],
                        animations: [
                            animations.trigger('alertVisible', [
                                animations.state('visible', animations.style({ opacity: 1 })),
                                animations.state('destroyed', animations.style({ opacity: 0 })),
                                animations.transition('visible => destroyed', animations.animate('600ms')),
                                animations.transition('destroyed => visible', animations.animate('600ms')),
                            ])
                        ]
                    },] },
        ];
        /** @nocollapse */
        NgBootstrapAlertComponent.ctorParameters = function () {
            return [
                { type: NgBootstrapAlertService }
            ];
        };
        NgBootstrapAlertComponent.propDecorators = {
            alertPosition: [{ type: core.Input }]
        };
        return NgBootstrapAlertComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NgBootstrapAlertModule = (function () {
        function NgBootstrapAlertModule() {
        }
        NgBootstrapAlertModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            animations$1.BrowserAnimationsModule
                        ],
                        declarations: [
                            NgBootstrapAlertComponent,
                        ],
                        exports: [
                            NgBootstrapAlertComponent
                        ],
                        providers: [
                            NgBootstrapAlertService,
                        ]
                    },] },
        ];
        return NgBootstrapAlertModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NgBootstrapAlert = (function () {
        function NgBootstrapAlert(message, type) {
            this._uuid = this.generateUUId();
            this._type = type;
            this._message = message;
            this._state = 'visible';
        }
        /**
         * @return {?}
         */
        NgBootstrapAlert.prototype.generateUUId = /**
         * @return {?}
         */
            function () {
                return this.randomizer() + this.randomizer() + '-' + this.randomizer() + '-' + this.randomizer() + '-' +
                    this.randomizer() + '-' + this.randomizer() + this.randomizer() + this.randomizer();
            };
        /**
         * @return {?}
         */
        NgBootstrapAlert.prototype.randomizer = /**
         * @return {?}
         */
            function () {
                return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
            };
        Object.defineProperty(NgBootstrapAlert.prototype, "message", {
            get: /**
             * @return {?}
             */ function () {
                return this._message;
            },
            set: /**
             * @param {?} message
             * @return {?}
             */ function (message) {
                this._message = message;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgBootstrapAlert.prototype, "timeoutInMiliSeconds", {
            get: /**
             * @return {?}
             */ function () {
                return this._timeoutInMiliSeconds;
            },
            set: /**
             * @param {?} timeoutInMiliSeconds
             * @return {?}
             */ function (timeoutInMiliSeconds) {
                this._timeoutInMiliSeconds = timeoutInMiliSeconds;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgBootstrapAlert.prototype, "type", {
            get: /**
             * @return {?}
             */ function () {
                return this._type;
            },
            set: /**
             * @param {?} type
             * @return {?}
             */ function (type) {
                this._type = type;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgBootstrapAlert.prototype, "uuid", {
            get: /**
             * @return {?}
             */ function () {
                return this._uuid;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgBootstrapAlert.prototype, "state", {
            get: /**
             * @return {?}
             */ function () {
                return this._state;
            },
            set: /**
             * @param {?} state
             * @return {?}
             */ function (state) {
                this._state = state;
            },
            enumerable: true,
            configurable: true
        });
        return NgBootstrapAlert;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    exports.NgBootstrapAlertComponent = NgBootstrapAlertComponent;
    exports.NgBootstrapAlertModule = NgBootstrapAlertModule;
    exports.NgBootstrapAlertService = NgBootstrapAlertService;
    exports.NgBootstrapAlert = NgBootstrapAlert;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,