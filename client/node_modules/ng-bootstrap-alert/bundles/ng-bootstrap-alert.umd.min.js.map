{"version":3,"sources":["ng://ng-bootstrap-alert/lib/ng-bootstrap-alert.service.ts","ng://ng-bootstrap-alert/lib/ng-bootstrap-alert.component.ts","ng://ng-bootstrap-alert/lib/ng-bootstrap-alert.module.ts","ng://ng-bootstrap-alert/lib/ng-bootstrap-alert.ts"],"names":["NgBootstrapAlertService","this","_bootstrapAlert","BehaviorSubject","prototype","alert","next","Injectable","NgBootstrapAlertComponent","bootstrapAlertService","_this","bootstrapAlerts","subscribe","bootstrapAlert","show","unshift","setTimeout","destroy","uuid","timeoutInMiliSeconds","DEFAULT_TIMEOUT","fade","state","bootstrapAlertIndex","findIndex","splice","FADE_TIMEOUT","array","attr","value","i","length","Component","args","selector","template","styles","animations","trigger","style","opacity","transition","animate","Input","NgBootstrapAlertModule","NgModule","imports","CommonModule","BrowserAnimationsModule","declarations","exports","providers","NgBootstrapAlert","message","type","_uuid","generateUUId","_type","_message","_state","randomizer","Math","floor","random","toString","substring","_timeoutInMiliSeconds"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Http, Headers, Response, RequestOptions } from '@angular/http';\nimport { NgBootstrapAlert } from './ng-bootstrap-alert';\nimport { AlertType } from './ng-bootstrap-alert';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable()\nexport class NgBootstrapAlertService {\n\n    public _bootstrapAlert: BehaviorSubject<NgBootstrapAlert>;\n\n    constructor() {\n        this._bootstrapAlert = new BehaviorSubject<NgBootstrapAlert>( null );\n    }\n\n    public alert(alert: NgBootstrapAlert) {\n        this._bootstrapAlert.next(alert);\n    }\n\n}\n","import { Component, ElementRef, Input } from '@angular/core';\nimport { NgBootstrapAlert, NgBootstrapAlertInterface } from './ng-bootstrap-alert';\nimport { NgBootstrapAlertService } from './ng-bootstrap-alert.service';\nimport { trigger, state, transition, style, animate } from '@angular/animations';\n\n@Component( {\n    selector: 'ng-bootstrap-alert',\n    template: `<div [ngClass]=\"alertPosition\" class=\"bootstrap-alert col-lg-4\">\r\n\t<div *ngFor=\"let bootstrapAlert of bootstrapAlerts\" id=\"{{bootstrapAlert.uuid}}\" class=\"alert alert-dismissable mb-2\" [ngClass]=\"bootstrapAlert.type\" [@alertVisible]=\"bootstrapAlert.state\">\r\n\t\t<button type=\"button\" class=\"close\" data-dismiss=\"alert\">x</button>\r\n\t\t{{bootstrapAlert.message}}\r\n\t</div>\r\n</div>`,\n    styles: [`.bootstrap-alert{z-index:2000;position:fixed}.top-left{left:1rem;top:1rem}.top-center{margin:auto;left:0;right:0;top:1rem}.top-right{right:1rem;top:1rem}.bottom-left{left:1rem;bottom:1rem}.bottom-center{margin:auto;left:0;right:0;bottom:1rem}.bottom-right{right:1rem;bottom:1rem}`],\n    animations: [\n        trigger( 'alertVisible', [\n            state( 'visible', style( { opacity: 1 } ) ),\n            state( 'destroyed', style( { opacity: 0 } ) ),\n            transition( 'visible => destroyed', animate( '600ms' ) ),\n            transition( 'destroyed => visible', animate( '600ms' ) ),\n        ] )\n    ]\n} )\n\nexport class NgBootstrapAlertComponent {\n\n    @Input() alertPosition: string;\n\n    bootstrapAlerts: Array<NgBootstrapAlertInterface>;\n\n    constructor( private bootstrapAlertService: NgBootstrapAlertService ) {\n\n        this.bootstrapAlerts = [];\n        this.bootstrapAlertService._bootstrapAlert.subscribe(\n            ( bootstrapAlert: NgBootstrapAlertInterface ) => {\n                this.show( bootstrapAlert );\n            }\n        );\n\n    }\n\n    readonly DEFAULT_TIMEOUT = 3000;\n    readonly FADE_TIMEOUT = 600;\n\n    show( bootstrapAlert: NgBootstrapAlertInterface ): void {\n        if ( !bootstrapAlert ) {\n            return;\n        }\n        this.bootstrapAlerts.unshift( bootstrapAlert );\n        setTimeout(\n            () => {\n                this.destroy( bootstrapAlert.uuid );\n            }, bootstrapAlert.timeoutInMiliSeconds ? bootstrapAlert.timeoutInMiliSeconds : this.DEFAULT_TIMEOUT\n        );\n    }\n\n    fade( bootstrapAlert): void {\n        bootstrapAlert.state = 'destroyed';\n    }\n\n    destroy( uuid: string ): void {\n        const bootstrapAlertIndex = this.findIndex( this.bootstrapAlerts, 'uuid', uuid );\n        if ( bootstrapAlertIndex !== -1 ) {\n            const bootstrapAlert = this.bootstrapAlerts[bootstrapAlertIndex];\n            bootstrapAlert.state = 'destroyed';\n            setTimeout(\n              () => {\n                  this.bootstrapAlerts.splice( bootstrapAlertIndex, 1 );\n              }, this.FADE_TIMEOUT\n            );\n        }\n    }\n\n    findIndex(array, attr, value): number {\n        for (let i = 0; i < array.length; i += 1) {\n            if (array[i][attr] === value) {\n                return i;\n            }\n        }\n        return -1;\n    }\n\n}\n","import { NgModule } from '@angular/core';\nimport { NgBootstrapAlertService } from './ng-bootstrap-alert.service';\nimport { NgBootstrapAlertComponent } from './ng-bootstrap-alert.component';\nimport { CommonModule } from '@angular/common';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { NgBootstrapAlert } from './ng-bootstrap-alert';\n\n@NgModule( {\n    imports: [\n        CommonModule,\n        BrowserAnimationsModule\n    ],\n    declarations: [\n        NgBootstrapAlertComponent,\n    ],\n    exports: [\n        NgBootstrapAlertComponent\n    ],\n    providers: [\n        NgBootstrapAlertService,\n    ]\n} )\n\nexport class NgBootstrapAlertModule {}\n","export interface NgBootstrapAlertInterface {\r\n    message: string;\r\n    timeoutInMiliSeconds: number;\r\n    type: AlertType;\r\n    uuid: string;\r\n    state: string;\r\n}\r\n\r\nexport type AlertType = 'alert-danger' | 'alert-success' | 'alert-info' | 'alert-warning';\r\n\r\nexport class NgBootstrapAlert implements NgBootstrapAlertInterface {\r\n    private _message: string;\r\n    private _timeoutInMiliSeconds: number;\r\n    private _type: AlertType;\r\n    private _uuid: string;\r\n    private _state: string;\r\n\r\n    constructor( message: string, type: AlertType ) {\r\n        this._uuid = this.generateUUId();\r\n        this._type = type;\r\n        this._message = message;\r\n        this._state = 'visible';\r\n    }\r\n\r\n    private generateUUId() {\r\n        return this.randomizer() + this.randomizer() + '-' + this.randomizer() + '-' + this.randomizer() + '-' +\r\n            this.randomizer() + '-' + this.randomizer() + this.randomizer() + this.randomizer();\r\n    }\r\n\r\n    private randomizer() {\r\n        return Math.floor(( 1 + Math.random() ) * 0x10000 ).toString( 16 ).substring( 1 );\r\n    }\r\n\r\n    public get message(): string {\r\n        return this._message;\r\n    }\r\n\r\n    public set message( message: string ) {\r\n        this._message = message;\r\n    }\r\n\r\n    public get timeoutInMiliSeconds(): number {\r\n        return this._timeoutInMiliSeconds;\r\n    }\r\n\r\n    public set timeoutInMiliSeconds( timeoutInMiliSeconds: number ) {\r\n        this._timeoutInMiliSeconds = timeoutInMiliSeconds;\r\n    }\r\n\r\n    public get type(): AlertType {\r\n        return this._type;\r\n    }\r\n\r\n    public set type( type: AlertType ) {\r\n        this._type = type;\r\n    }\r\n\r\n    public get uuid(): string {\r\n        return this._uuid;\r\n    }\r\n\r\n    public get state(): string {\r\n        return this._state;\r\n    }\r\n\r\n    public set state( state: string ) {\r\n        this._state = state;\r\n    }\r\n}\r\n"]}